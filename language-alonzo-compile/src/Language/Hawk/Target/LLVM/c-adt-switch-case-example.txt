// C Code

#include <stdio.h>

struct Result {
  enum {
    SingleResult, TwoResults, Error
  } tag;
  union {
    struct {
      int arg1;
    } singleResult;
    struct {
      int arg1;
      int arg2;
    } twoResults;
  } value;
};

int main(int ac, char **av)
{
  struct Result someResult;

  switch(someResult.tag) {
    case SingleResult: {
      int res = someResult.value.singleResult.arg1;
      f(res);
      break;
    }
    case TwoResults: {
      int res1 = someResult.value.twoResults.arg1;
      int res2 = someResult.value.twoResults.arg2;
      g(res1, res2);
      break;
    }
    case Error: {
      error();
      break;
    }
  }
}



// LLVM Output
; ModuleID = '/tmp/webcompile/_30660_0.bc'
source_filename = "/tmp/webcompile/_30660_0.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-ellcc-linux"

%struct.Result = type { i32, %union.anon } // Notice llvm uses the largest struct
%union.anon = type { %struct.anon.0 }
%struct.anon.0 = type { i32, i32 }
%struct.anon = type { i32 }

; Function Attrs: nounwind
define i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.Result, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = getelementptr inbounds %struct.Result, %struct.Result* %6, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  switch i32 %11, label %33 [
    i32 0, label %12
    i32 1, label %19
    i32 2, label %31
  ]

; <label>:12:                                     ; preds = %2
  %13 = getelementptr inbounds %struct.Result, %struct.Result* %6, i32 0, i32 1
  %14 = bitcast %union.anon* %13 to %struct.anon*
  %15 = getelementptr inbounds %struct.anon, %struct.anon* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %7, align 4
  %17 = load i32, i32* %7, align 4
  %18 = call i32 (i32, ...) bitcast (i32 (...)* @f to i32 (i32, ...)*)(i32 %17)
  br label %33

; <label>:19:                                     ; preds = %2
  %20 = getelementptr inbounds %struct.Result, %struct.Result* %6, i32 0, i32 1
  %21 = bitcast %union.anon* %20 to %struct.anon.0*
  %22 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %8, align 4
  %24 = getelementptr inbounds %struct.Result, %struct.Result* %6, i32 0, i32 1
  %25 = bitcast %union.anon* %24 to %struct.anon.0*
  %26 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %9, align 4
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* %9, align 4
  %30 = call i32 (i32, i32, ...) bitcast (i32 (...)* @g to i32 (i32, i32, ...)*)(i32 %28, i32 %29)
  br label %33

; <label>:31:                                     ; preds = %2
  %32 = call i32 (...) @error()
  br label %33

; <label>:33:                                     ; preds = %2, %31, %19, %12
  %34 = load i32, i32* %3, align 4
  ret i32 %34
}

declare i32 @f(...) #1

declare i32 @g(...) #1

declare i32 @error(...) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (trunk)"}